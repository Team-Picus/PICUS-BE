spring:
  datasource:
    username: ${USERNAME}
    url: ${URL}
    password: ${password}
    driver-class-name: com.mysql.cj.jdbc.Driver
  data:
    mongodb:
      host: localhost
      port: 27017
      database: picus
      username: picus
      password: picus
      authentication-database: admin
    redis:
      host: localhost
      port: 6379
  batch:
    job:
      enabled: false
    jdbc:
      isolation-level-for-create: READ_COMMITTED
      initialize-schema: always
      table-prefix: BATCH_

  jpa:
    hibernate:
      ddl-auto: update
    database: mysql
    database-platform: org.hibernate.dialect.MySQL8Dialect
    open-in-view: false

  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/kakao"
            scope: profile_nickname

        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
  threads:
    virtual:
      enabled: true

  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest

  cloud:
    aws:
      s3:
        bucket: ${BUCKET_NAME}
      credentials:
        access-key: ${IAM_ACCESS_KEY}
        secret-key: ${IAM_SECRET_KEY}
      region:
        static: ap-northeast-2

rabbitmq:
  host: "localhost"
  port: 5672
  virtual-host: "/"
  username: "guest"
  password: "guest"
  relay:
    port: 61613
    system-login: guest
    system-passcode: guest
    client-login: guest
    client-passcode: guest
  chat:
    queue:
      name: "chat.queue"
    exchange:
      name: "chat.exchange"
    routing:
      key: "*.room."

app:
  auth:
    tokenSecret: ${APP_TOKEN_SECRET}
    tokenExpiry: 18000
    refreshTokenExpiry: 18000
  oauth2:
    authorizedRedirectUris:

jwt:
  secret: ${JWT_SECRET}
  access:
    expiration: 18000
    header: Authorization
  refresh:
    expiration: 18000
    header: Authorization-Refresh

cors:
  allowed-origins: "*"  # 모든 Origin 허용
  allowed-methods: "GET,POST,PUT,DELETE,OPTIONS"
  allowed-headers: "*"  # 모든 헤더 허용
  max-age: 3600


exclude-auth-path-patterns:
  paths:
    - pathPattern: /login
      method: GET

exclude-ratelimiter-path-patterns:
  paths:
    - pathPattern: /login
      method: GET